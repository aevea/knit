// Code generated by oto; DO NOT EDIT.

'use strict';

 
export class Healthcheck {
	
	async check(url, healthcheckRequest) {
		const headers = {
			'Accept':		'application/json',
			'Accept-Encoding':	'gzip',
			'Content-Type':		'application/json',
		}
		healthcheckRequest = healthcheckRequest || {}
		const response = await fetch(`${url}/oto/Healthcheck.Check`, {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(healthcheckRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
}
 
export class PullRequestService {
	
	async averageByWeek(url, repositoryRequest) {
		const headers = {
			'Accept':		'application/json',
			'Accept-Encoding':	'gzip',
			'Content-Type':		'application/json',
		}
		repositoryRequest = repositoryRequest || {}
		const response = await fetch(`${url}/oto/PullRequestService.AverageByWeek`, {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(repositoryRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
	async oldest(url, repositoryRequest) {
		const headers = {
			'Accept':		'application/json',
			'Accept-Encoding':	'gzip',
			'Content-Type':		'application/json',
		}
		repositoryRequest = repositoryRequest || {}
		const response = await fetch(`${url}/oto/PullRequestService.Oldest`, {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(repositoryRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
}
