// Code generated by oto; DO NOT EDIT.

package generated

import (
	"context"
	"log"
	"net/http"

	"github.com/pacedotdev/oto/otohttp"
	
)


type Healthcheck interface {

	Check(context.Context, HealthcheckRequest) (*HealthcheckResponse, error)
}



type healthcheckServer struct {
	server *otohttp.Server
	healthcheck Healthcheck
}

func RegisterHealthcheck(server *otohttp.Server, healthcheck Healthcheck) {
	handler := &healthcheckServer{
		server: server,
		healthcheck: healthcheck,
	}
	server.Register("Healthcheck", "Check", handler.handleCheck)
	}

func (s *healthcheckServer) handleCheck(w http.ResponseWriter, r *http.Request) {
	var request HealthcheckRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.healthcheck.Check(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}




type HealthcheckRequest struct {
	
}

type HealthcheckResponse struct {
	Ok string `json:"ok"`
Error string `json:"error,omitempty"`

}
